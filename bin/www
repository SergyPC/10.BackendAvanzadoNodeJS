#!/usr/bin/env node

require('dotenv').config();

/**
 * Module dependencies.
 */

var app = require('../app'); //Carga mi aplicación app.js
var debug = require('debug')('nodepop:server');
var http = require('http'); //Carga la librería http

const cote = require('cote'); //Carga la librería cote para los microservicios
const responder = new cote.Responder({ name: 'thumbail creator' }); // Declarar el microservicio

responder.on('save-thumbnail', (req, done) => { // Logica del servicio
  try {
    // console.log('ENTRO en www -> responder.on(Save-thumbnail)');
    // console.log('req.filename:', req.filename);
    const result = req.filename;
    done(result);

    // console.log('req.imgToSave:', req.imgToSave);
    // const result = req.imgToSave;
    // done(result);
  } 
  catch (error) {
    console.log(error);
  }
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000'); //Definimos el puerto: Bien por variable de entorno (process.env.PORT) y si no está definida ponemos 3000
app.set('port', port); //Establecemos una variable de Express para pasarle el puerto

/**
 * Create HTTP server.
 */

var server = http.createServer(app); //Creamos un servidor

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port); //Arrancamos el servidor escuchando por el puerto especificado
//Aquí utiliza un event emiter y podemos emitir cosas o nos podemos suscribir a diferentes métodos:
server.on('error', onError); //Cuando ocurra en este servidor un evento error vas a ejcutar la función onError
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES': //Si utilizas un puerto inferior a 1024 y necesitamos permisos de administrador:
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE': //Puerto que ya está en uso:
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
